{"ast":null,"code":"var _jsxFileName = \"/home/janek/Desktop/EGUI/gui-course/React.js/development/frontend/src/components/Calendar.js\";\nimport React, { useState, useEffect } from 'react';\nimport { getMonthStringFromDate, addDaysToDate } from '../utils';\nimport { IoIosArrowDropleft, IoIosArrowDropright } from 'react-icons/io';\nimport axios from 'axios';\nexport const Calendar = props => {\n  const [currDate, setCurrDate] = useState(props.currDate);\n  const [daysWithEvents, setDaysWithEvents] = useState([]);\n  useEffect(() => {\n    console.log('getting data');\n    axios.get('http://localhost:3000/api/events').then(data => data.data.data).then(data => JSON.parse(data)).then(data => {\n      const events = data.map(el => {\n        const date = new Date(el.Date);\n        date.setHours(0, 0, 0, 0);\n        return {\n          id: el.Id,\n          description: el.Description,\n          date\n        };\n      });\n      setDaysWithEvents(events);\n    });\n  }, []);\n\n  const generateDays = (events = []) => {\n    const days = [];\n    const date = new Date(currDate).setHours(0, 0, 0, 0);\n    date.setDate(1); // Starting from some days from previous month:\n\n    while (date.getDay() !== 1) date.setDate(date.getDate() - 1); // Generating the days:\n\n\n    const daysRows = 6;\n    const daysInWeek = 7;\n    let dayCounter = 0;\n\n    while (dayCounter < daysRows * daysInWeek) {\n      let hasEvent = false;\n      console.log(events);\n      console.log(events.find(el => el.date === date));\n      if (events.find(el => el.date === date)) hasEvent = true;\n      days.push({\n        date: date.getDate(),\n        active: date.getMonth() === currDate.getMonth(),\n        event: hasEvent\n      });\n      addDaysToDate(date, 1);\n      dayCounter++;\n    }\n\n    return days;\n  };\n\n  const onDayClicked = e => {\n    const day = e.target.innerText;\n    const date = currDate;\n    date.setDate(day);\n\n    if (e.target.classList.length > 1) {\n      if (day > 20) date.setMonth(date.getMonth() - 1);else date.setMonth(date.getMonth() + 1);\n    }\n\n    props.switchView('day', date);\n  };\n\n  const onMonthChanged = offset => {\n    const date = new Date(currDate);\n    let newMonth = date.getMonth() + offset;\n\n    if (newMonth > 11) {\n      newMonth = 0;\n      date.setFullYear(date.getFullYear() + 1);\n    }\n\n    if (newMonth < 0) {\n      newMonth = 11;\n      date.setFullYear(date.getFullYear() - 1);\n    }\n\n    date.setMonth(newMonth);\n    setCurrDate(date);\n  };\n\n  const days = generateDays(daysWithEvents).map(({\n    date,\n    active,\n    event\n  }, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    className: `calendar__day ${!active ? 'calendar__day--ghost' : ''} ${event ? 'calendar__day--event' : ''}`,\n    onClick: onDayClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, date));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar__navbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar__arrow\",\n    onClick: () => onMonthChanged(-1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IoIosArrowDropleft, {\n    className: \"calendar__icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"calendar__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, getMonthStringFromDate(currDate)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar__arrow\",\n    onClick: () => onMonthChanged(1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IoIosArrowDropright, {\n    className: \"calendar__icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar__days-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, days));\n};\nexport default Calendar;","map":{"version":3,"sources":["/home/janek/Desktop/EGUI/gui-course/React.js/development/frontend/src/components/Calendar.js"],"names":["React","useState","useEffect","getMonthStringFromDate","addDaysToDate","IoIosArrowDropleft","IoIosArrowDropright","axios","Calendar","props","currDate","setCurrDate","daysWithEvents","setDaysWithEvents","console","log","get","then","data","JSON","parse","events","map","el","date","Date","setHours","id","Id","description","Description","generateDays","days","setDate","getDay","getDate","daysRows","daysInWeek","dayCounter","hasEvent","find","push","active","getMonth","event","onDayClicked","e","day","target","innerText","classList","length","setMonth","switchView","onMonthChanged","offset","newMonth","setFullYear","getFullYear","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getMonthStringFromDate, addDaysToDate } from '../utils';\nimport { IoIosArrowDropleft, IoIosArrowDropright } from 'react-icons/io';\nimport axios from 'axios';\n\nexport const Calendar = (props) => {\n    const [currDate, setCurrDate] = useState(props.currDate);\n    const [daysWithEvents, setDaysWithEvents] = useState([]);\n\n    useEffect(() => {\n        console.log('getting data');\n        axios\n            .get('http://localhost:3000/api/events')\n            .then((data) => data.data.data)\n            .then((data) => JSON.parse(data))\n            .then((data) => {\n                const events = data.map((el) => {\n                    const date = new Date(el.Date);\n                    date.setHours(0, 0, 0, 0);\n                    return {\n                        id: el.Id,\n                        description: el.Description,\n                        date,\n                    };\n                });\n                setDaysWithEvents(events);\n            });\n    }, []);\n\n    const generateDays = (events = []) => {\n        const days = [];\n        const date = new Date(currDate).setHours(0, 0, 0, 0);\n        date.setDate(1);\n        // Starting from some days from previous month:\n        while (date.getDay() !== 1) date.setDate(date.getDate() - 1);\n\n        // Generating the days:\n        const daysRows = 6;\n        const daysInWeek = 7;\n\n        let dayCounter = 0;\n        while (dayCounter < daysRows * daysInWeek) {\n            let hasEvent = false;\n            console.log(events);\n            console.log(events.find((el) => el.date === date));\n            if (events.find((el) => el.date === date)) hasEvent = true;\n            days.push({\n                date: date.getDate(),\n                active: date.getMonth() === currDate.getMonth(),\n                event: hasEvent,\n            });\n            addDaysToDate(date, 1);\n            dayCounter++;\n        }\n        return days;\n    };\n\n    const onDayClicked = (e) => {\n        const day = e.target.innerText;\n        const date = currDate;\n        date.setDate(day);\n        if (e.target.classList.length > 1) {\n            if (day > 20) date.setMonth(date.getMonth() - 1);\n            else date.setMonth(date.getMonth() + 1);\n        }\n        props.switchView('day', date);\n    };\n\n    const onMonthChanged = (offset) => {\n        const date = new Date(currDate);\n        let newMonth = date.getMonth() + offset;\n        if (newMonth > 11) {\n            newMonth = 0;\n            date.setFullYear(date.getFullYear() + 1);\n        }\n        if (newMonth < 0) {\n            newMonth = 11;\n            date.setFullYear(date.getFullYear() - 1);\n        }\n        date.setMonth(newMonth);\n\n        setCurrDate(date);\n    };\n\n    const days = generateDays(daysWithEvents).map(({ date, active, event }, i) => (\n        <div\n            key={i}\n            className={`calendar__day ${!active ? 'calendar__day--ghost' : ''} ${\n                event ? 'calendar__day--event' : ''\n            }`}\n            onClick={onDayClicked}\n        >\n            {date}\n        </div>\n    ));\n\n    return (\n        <div className=\"calendar\">\n            <div className=\"calendar__navbar\">\n                <div className=\"calendar__arrow\" onClick={() => onMonthChanged(-1)}>\n                    <IoIosArrowDropleft className=\"calendar__icon\" />\n                </div>\n                <h1 className=\"calendar__title\">{getMonthStringFromDate(currDate)}</h1>\n                <div className=\"calendar__arrow\" onClick={() => onMonthChanged(1)}>\n                    <IoIosArrowDropright className=\"calendar__icon\" />\n                </div>\n            </div>\n            <div className=\"calendar__days-box\">{days}</div>\n        </div>\n    );\n};\n\nexport default Calendar;\n"]},"metadata":{},"sourceType":"module"}