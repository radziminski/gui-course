{"ast":null,"code":"var _jsxFileName = \"/home/janek/Desktop/EGUI/gui-course/React.js/development/frontend/src/views/Day.js\";\nimport React, { useState, useEffect } from 'react';\nimport { dateToString } from '../utils';\nimport EventCard from '../components/EventCard';\nimport Button from '../components/Button';\nimport { digitToTwoCharString } from '../utils';\nimport axios from 'axios';\n\nconst Day = props => {\n  const [events, setEvents] = useState([]);\n\n  const getEventsFromCurrDate = () => {\n    const reqUrl = `http://localhost:3000/api/events/${props.currDate.getFullYear()}-${digitToTwoCharString(props.currDate.getMonth() + 1)}-${digitToTwoCharString(props.currDate.getDate())}/`;\n    console.log(reqUrl);\n    axios.get(reqUrl).then(data => data.data.data).then(data => JSON.parse(data)).then(data => {\n      const events = data.map(el => {\n        return {\n          id: el.Id,\n          description: el.Description,\n          date: new Date(el.Date)\n        };\n      });\n      setEvents(events);\n    });\n  };\n\n  useEffect(() => {\n    getEventsFromCurrDate();\n  }, []);\n\n  const deleteEvent = id => {\n    const reqUrl = `http://localhost:3000/api/deleteevent/${id}`;\n    axios.delete(reqUrl).then(data => {\n      console.log(data);\n      getEventsFromCurrDate();\n    });\n  };\n\n  const {\n    switchView,\n    currDate\n  } = props;\n  let renderedEvents = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"day-view__msg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 26\n    }\n  }, \"There are no events on this day.\");\n  if (events.length > 0) renderedEvents = events.map((el, i) => /*#__PURE__*/React.createElement(EventCard, {\n    key: i,\n    id: el.id,\n    date: el.date,\n    description: el.description,\n    onDelete: deleteEvent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"day-view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"Events on \", dateToString(currDate)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"day-view__events-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, renderedEvents), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"day-view__btns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => switchView('event', currDate),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, \"Add New\"), /*#__PURE__*/React.createElement(Button, {\n    classTypes: ['red'],\n    onClick: () => switchView('home', currDate),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, \"Back\")));\n};\n\nexport default Day;","map":{"version":3,"sources":["/home/janek/Desktop/EGUI/gui-course/React.js/development/frontend/src/views/Day.js"],"names":["React","useState","useEffect","dateToString","EventCard","Button","digitToTwoCharString","axios","Day","props","events","setEvents","getEventsFromCurrDate","reqUrl","currDate","getFullYear","getMonth","getDate","console","log","get","then","data","JSON","parse","map","el","id","Id","description","Description","date","Date","deleteEvent","delete","switchView","renderedEvents","length","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { dateToString } from '../utils';\nimport EventCard from '../components/EventCard';\nimport Button from '../components/Button';\nimport { digitToTwoCharString } from '../utils';\nimport axios from 'axios';\n\nconst Day = (props) => {\n    const [events, setEvents] = useState([]);\n\n    const getEventsFromCurrDate = () => {\n        const reqUrl = `http://localhost:3000/api/events/${props.currDate.getFullYear()}-${digitToTwoCharString(\n            props.currDate.getMonth() + 1\n        )}-${digitToTwoCharString(props.currDate.getDate())}/`;\n        console.log(reqUrl);\n\n        axios\n            .get(reqUrl)\n            .then((data) => data.data.data)\n            .then((data) => JSON.parse(data))\n            .then((data) => {\n                const events = data.map((el) => {\n                    return {\n                        id: el.Id,\n                        description: el.Description,\n                        date: new Date(el.Date),\n                    };\n                });\n                setEvents(events);\n            });\n    };\n\n    useEffect(() => {\n        getEventsFromCurrDate();\n    }, []);\n\n    const deleteEvent = (id) => {\n        const reqUrl = `http://localhost:3000/api/deleteevent/${id}`;\n        axios.delete(reqUrl).then((data) => {\n            console.log(data);\n            getEventsFromCurrDate();\n        });\n    };\n\n    const { switchView, currDate } = props;\n    let renderedEvents = <div className=\"day-view__msg\">There are no events on this day.</div>;\n\n    if (events.length > 0)\n        renderedEvents = events.map((el, i) => (\n            <EventCard\n                key={i}\n                id={el.id}\n                date={el.date}\n                description={el.description}\n                onDelete={deleteEvent}\n            />\n        ));\n\n    return (\n        <section className=\"day-view\">\n            <h1 className=\"section-title\">Events on {dateToString(currDate)}</h1>\n            <div className=\"day-view__events-box\">{renderedEvents}</div>\n            <div className=\"day-view__btns\">\n                <Button onClick={() => switchView('event', currDate)}>Add New</Button>\n                <Button classTypes={['red']} onClick={() => switchView('home', currDate)}>\n                    Back\n                </Button>\n            </div>\n        </section>\n    );\n};\n\nexport default Day;\n"]},"metadata":{},"sourceType":"module"}